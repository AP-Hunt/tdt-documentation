---
title: Structure your documentation
weight: 32
last_reviewed_on: 2019-10-03
review_in: 1 day
---

# Build a single page documentation site

> COMBINE SINGLE PAGE AND MULTIPAGE CONTENT INTO ONE SECTION

You can create a technical documentation site that contains all of its content in a single page. An example is the [GOV.UK Notify Java documentation](https://docs.notifications.service.gov.uk/java.html).

This is suitable for documentation sites that have do not have a lot of content, and do not need to have topics split into individual pages.

## Create the single page folder structure

When you [create a new project](create_new_project/#create-a-new-documentation-project), that project has a source folder containing:
- a `documentation/index.md` content file
- an `index.html.md.erb` file

The `index.html.md.erb` file contains a `partial` that refers to the `documentation/index.md` content file.

To build the single page of documentation, you can do either of the following:

- create more `.md` content files and add partials to the `index.html.md.erb` file that refer to those content files
- add content directly to the `index.html.md.erb` file

### Use multiple .md content files

In this example, you have three `.md` content files:

- an introduction named `index.md` in the `documentation` folder
- a "Who is this documentation for?" section named `who-docs.md` in the `documentation/introduction` folder
- a "Set up the API client" section named `set_up_client` in the `documentation/introduction` folder

The `index.html.md.erb` file would look like this:

```bash
---
title: Tech Docs
---

<%%= partial 'documentation/index' %>;
<%%= partial 'documentation/introduction/who-docs' %>;
<%%= partial 'documentation/introduction/set_up_client' %>;
```

This `index.html.md.erb` will build a documentation site with the following structure:

- Introducution
- Who is this documentation for?
- Set up the client


### Add content to index.html.md.erb file

In this example, you have three `.md` content files:

- an introduction named `index.md` in the `documentation` folder
- a "Who is this documentation for?" section named `who-docs.md` in the `documentation/introduction` folder
- a "Set up the API client" section named `set_up_client` in the `documentation/introduction` folder

Add the content in these files into the `index.html.md.erb` file. The `index.html.md.erb` file would look like this:

```bash
---
title: Tech Docs
---

# Introduction

CONTENT

# Who is this documentation for?

CONTENT

# Set up the API client

CONTENT

```

This `index.html.md.erb` will build a documentation site with the following structure:

- Introducution
- Who is this documentation for?
- Set up the client

## Build a multipage documentation site

You can create a technical documentation site that splits its content across multiple pages.

This is suitable for documentation sites that have too much content for the single page format.

Examples include the:

- [GOV.UK PaaS technical documentation](https://docs.cloud.service.gov.uk/)
- [GOV.UK Pay technical documentation](https://docs.payments.service.gov.uk/#gov-uk-pay-documentation)

You should use the [search feature](/create_project/create_new_project/#enable-search) with multipage documentation sites.

## Amend the tech-docs.yml file

Add the following code to your project’s `config/tech-docs.yml` file if necessary:

```
# Enable multipage navigation in the sidebar
multipage_nav: true
```

## Create the multipage folder structure

Each folder inside the `source` folder represents one documentation page.

For each page, create a content folder and put an `index.html.md.erb` file into that folder. This `index.html.md.erb` file is the [content file]((/amend_project/content/#change-your-content)).

Example structure:

IMAGE

## Amend the index.html.md.erb file(s)

Add a weight argument and value to the frontmatter of each .html.md.erb file. This builds the structure of the multipage documentation.

For example:

```bash
---
title: Product Technical Documentation
---
```

becomes

```bash
---
title: Product Technical Documentation
weight: 10
---
```

Higher weights mean that the content is lower down in the documentation hierarchy. A way to remember this is to think “heavier pages sink to the bottom”.

Make sure every individual page starts with an H1 heading.

## Nest pages within pages (optional)

You can nest pages within each other.

To do this, create content folders inside content folders with `index.html.md.erb` content files.

IMAGE

Each `.html.md.erb` file inside a nested folder must have a weight value that preserves the overall hierarchy both within the nested content and compared to the other non-nested content.

An example of this content structure is the GOV.UK Pay technical documentation on switching to live:

- [documentation](https://docs.payments.service.gov.uk/switching_to_live/#switching-to-live)
- [GitHub folder](https://github.com/alphagov/pay-tech-docs/tree/master/source/switching_to_live)
